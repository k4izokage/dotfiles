#!/usr/bin/env bash

# Retrieve 'path' variables (lowercase)
source "${HOME}"/.config/punk_records/Poneglyph

# Retrieve 'value' variables (UPPERCASE)
source "$rice_path"/rices/"${CURRENT_RICE}"/Theme

############################################################

# Wallpaper engine
load_wallpaper() {
	if pidof -x xwinwrap; then
		pkill xwinwrap
	fi

	case $WALL_ENGINE in
		# Set a random wallpaper from rice directory
		"Theme") feh -z --no-fehbg --bg-fill $theme_wall_dir ;;

		# Set a random wallpaper from the directory you specified
		"CustomDir") feh -z --no-fehbg --bg-fill "${HOME}"/Pictures/Wallpaper ;;

		# Sets a specific image as wallpaper
		"CustomImage") feh --no-fehbg --bg-fill "${HOME}"/Pictures/Wallpaper/Example.png ;;

		# Set an animated wallpaper. "mp4, mkv, gif"
		"CustomAnimated") AnimatedWall --start "{$HOME}/Videos/AnimatedWall/Example.mp4" ;;

		*) feh -z --no-fehbg --bg-fill $theme_wall_dir ;;
	esac
}

# Set bspwm configuration
set_bspwm_config() {
	bspc config window_gap ${WINDOW_GAP}
    bspc config border_width ${BORDER_WIDTH}
    bspc config top_padding ${PAD_TOP}
    bspc config bottom_padding ${PAD_BOTTOM}
    bspc config left_padding ${PAD_LEFT}
    bspc config right_padding ${PAD_RIGHT}
    bspc config normal_border_color "${NORMAL_BC}"
    bspc config focused_border_color "${FOCUSED_BC}"
    bspc config presel_feedback_color "${PRESEL_FEEDBACK_COLOR}"
}

# Terminal configuration
set_term_config() {
    # Opacity
    sed -i "$alacritty_cfgfile" \
        -e "s/opacity = .*/opacity = $ALC_OPACITY/g" \

    # Font
	sed -i "$alacritty_font_cfgfile" \
		-e "s/size = .*/size = $ALC_FONT_SIZE/" \
		-e "s/family = .*/family = \"$ALC_FONT_FAMILY\"/"
    # Colorscheme
    cat > "$alacritty_color_cfgfile" <<-EOF
		# Default colors
		[colors.primary]
		background = "${BG}"
		foreground = "${FG}"

		# Cursor colors
		[colors.cursor]
		cursor = "${CURSOR}"
		text = "${TEXT}"

		# Normal colors
		[colors.normal]
		black = "${BLACK}"
		red = "${RED}"
		green = "${GREEN}"
		yellow = "${YELLOW}"
		blue =  "${BLUE}"
		magenta = "${MAGENTA}"
		cyan = "${CYAN}"
		white = "${WHITE}"

		# Bright colors
		[colors.bright]
		black = "${BLACKB}"
		red = "${REDB}"
		green = "${GREENB}"
		yellow = "${YELLOWB}"
		blue = "${BLUEB}"
		magenta = "${MAGENTAB}"
		cyan = "${CYANB}"
		white = "${WHITEB}"
	EOF
}

# Set compositor configuration
set_picom_config() {
	sed -i "$picom_cfgfile" \
		-e "s/shadow = .*/shadow = ${P_SHADOW};/" \
		-e "s/shadow-color = .*/shadow-color = \"${P_SHADOW_COLOR}\"/" \
		-e "s/shadow-offset-x = .*/shadow-offset-x = \"${P_SHADOW_OFFSET}\"/" \
		-e "s/shadow-offset-y = .*/shadow-offset-y = \"${P_SHADOW_OFFSET}\"/" \
		-e "s/fading = .*/fading = ${P_FADE};/" \
		-e "s/corner-radius = .*/corner-radius = ${P_CORNER_RADIUS}/"

	sed -i "$picom_rules_file" \
		-e "95s/	opacity = .*/	opacity = 1;/"

	if [[ "$P_ANIMATION" = "true" ]]; then
		sed -i "$picom_rules_file" \
			-e '/picom-animations/c\@include "picom-animations.conf"'
	else
		sed -i "$picom_rules_file" \
			-e '/picom-animations/c\#@include "picom-animations.conf"'
	fi
}

# Set dunst notification daemon config
set_dunst_config() {
	local OFFSET_TOP=$((BORDER_WIDTH + PAD_TOP + WINDOW_GAP))
    local OFFSET_RIGHT=$((BORDER_WIDTH + PAD_RIGHT + WINDOW_GAP))

    sed -i "$dunst_cfgfile" \
		-e "s/offset = .*/offset = ${OFFSET_RIGHT}x${OFFSET_TOP}"/g \
        -e "s/transparency = .*/transparency = ${D_TRANSPARENCY}/g" \
        -e "s/frame_color = .*/frame_color = \"${D_FRAME_COLOR}\"/g" \
        -e "s/separator_color = .*/separator_color = \"${D_SEPARATOR_COLOR}\"/g" \
        -e "s/font = .*/font = ${DUNST_FONT}/g" \
        -e "s/foreground='.*'/foreground='${DUNST_FG}'/g"

    sed -i '/urgency_low/Q' "$dunst_cfgfile"
    cat >> "$dunst_cfgfile" <<- _EOF_
		[urgency_low]
		timeout = 3
		background = "${BG}"
		foreground = "${GREEN}"

		[urgency_normal]
		timeout = 5
		background = "${BG}"
		foreground = "${WHITE}"

		[urgency_critical]
		timeout = 0
		background = "${BG}"
		foreground = "${RED}"
_EOF_
}

set_eww_colors() {
    cat > "$eww_widget_dir/colors.scss" << EOF
\$bg: ${BG};
\$bg-alt: ${BGALT};
\$fg: ${FG};
\$black: ${BLACKB};
\$gray: ${GRAY};
\$red: ${RED};
\$green: ${GREEN};
\$yellow: ${YELLOW};
\$blue: ${BLUE};
\$magenta: ${MAGENTA};
\$cyan: ${CYAN};
\$archicon: ${ARCHICON};
EOF
}

set_jgmenu_config() {
	sed -i "$jgmenu_cfgfile" \
		-e "s/color_menu_bg = .*/color_menu_bg = ${J_MENU_BGC}/" \
		-e "s/color_norm_fg = .*/color_norm_fg = ${J_NORM_FGC}/" \
		-e "s/color_sel_bg = .*/color_sel_bg = ${J_SEL_BGC}/" \
		-e "s/color_sel_fg = .*/color_sel_fg = ${J_SEL_FGC}/" \
		-e "s/color_sep_fg = .*/color_sep_fg = ${J_SEP_FG}/"
}

launch_dunst() {
	dunst -config $dunst_cfgfile &
	sleep 0.1
}

launch_polybar() {
	for mon in $(polybar --list-monitors | cut -d":" -f1); do
        for module in "${POLYBAR_MODULES[@]}"; do
            (MONITOR=$mon polybar -q "$module" -c "${poly_theme_dir}/config.ini")&
        done
    done
}

launch_eww_bar() {
	eww -c $eww_theme_dir open --toggle bar

    # Fix eww,  when entering fullscreen state
	bspc subscribe node_state | while read -r _ _ _ _ state flag; do
        [[ "$state" == "fullscreen" ]] || continue
            if [ "$flag" == on ]; then
                HideBar -h
            else
                HideBar -u
            fi
    done &
}

##########################################
#           Apply Configurations         #
##########################################

# Terminate existing processes if necessary.
. "${rice_path}"/src/RefreshProcess

# Wallpaper engine
load_wallpaper

# Apply new "bspwm, terminal, picom, dunst, eww, jgmenu" configurations
set_bspwm_config
set_term_config
set_picom_config
set_dunst_config
set_eww_colors
set_jgmenu_config

# Launch dunst notification daemon
launch_dunst

# Launch polybar or eww bar
if is_eww_theme; then
	launch_eww_bar
else
	launch_polybar
fi