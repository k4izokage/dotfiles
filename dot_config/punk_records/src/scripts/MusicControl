#!/usr/bin/env bash
#  ███╗   ███╗███████╗██████╗ ██╗ █████╗      ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  ██████╗ ██╗
#  ████╗ ████║██╔════╝██╔══██╗██║██╔══██╗    ██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔═══██╗██║
#  ██╔████╔██║█████╗  ██║  ██║██║███████║    ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝██║   ██║██║
#  ██║╚██╔╝██║██╔══╝  ██║  ██║██║██╔══██║    ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██║   ██║██║
#  ██║ ╚═╝ ██║███████╗██████╔╝██║██║  ██║    ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║╚██████╔╝███████╗
#  ╚═╝     ╚═╝╚══════╝╚═════╝ ╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚══════╝

# This script uses playerctl and mpc to control the multimedia playback,
# allowing actions such as "stop, pause, play, next, previous" across
# various players like Spotify, ncmpcpp, and others.

source "${HOME}"/.config/punk_records/Poneglyph

# Switch between supported audio players in rotation.
switch_player() {
    MusicControl --pause

    # Supported players
    players=("MPD" "spotify")

    # Find the current player and calculate the next one in the list
    for i in "${!players[@]}"; do
        if [ "${players[$i]}" = "$CURRENT_PLAYER" ]; then
            index=$i
            break
        fi
    done
    next_index=$(( (index + 1) % ${#players[@]} ))
    next_value="${players[$next_index]}"

    # Update current player
    echo "$next_value" > $rice_path/src/current/.music_player
}

# Extract and save the cover art based on the currently playing song's metadata.
# If no cover art is found, a fallback image will be used.
extract_cover_art() {
    # Temporary file paths for cover art
    cover=/tmp/cover.png
    backup_cover=$asset_bin_path/fallback.webp

    # File to store the last song played
    lastsong_file="/tmp/last_song.txt"

    current_song=$(MusicControl --metadata-format)
    last_song=""

    [ -f "$lastsong_file" ] && last_song=$(cat "$lastsong_file")

    # Only fetch new cover art if the song has changed or no cover exists
    if [ "$current_song" != "$last_song" ] || [ ! -f "$cover" ]; then
        case $CURRENT_PLAYER in
            "MPD")
                # Extract cover art from MPD song
                mpddir=~/Music
                ffmpeg -i "$mpddir/$(mpc current -f %file%)" "${cover}" -y &> /dev/null || cp $backup_cover $cover
                ;;
            "spotify")
                # Get album art for Spotify via playerctl and download it
                albumart="$(playerctl --player="$CURRENT_PLAYER" metadata mpris:artUrl | sed -e 's/open.spotify.com/i.scdn.co/g')"
                if [[ $(playerctl --player="$CURRENT_PLAYER" metadata mpris:artUrl) ]]; then
                    curl -s "$albumart" --output $cover
                else
                    cp $backup_cover $cover
                fi
        esac

        # Update last played song
        echo "$current_song" > "$lastsong_file"
    fi

    echo "$cover"
}

# The Polybar process ID of the current music module
polybar_music_pid=$(pgrep -a "polybar" | grep "$MUSIC_MODULE" | cut -d" " -f1)

# Sends a control action to the Polybar instances associated with the music module
update_hooks() {
    local pids="$1"
    local action="$2"
    while IFS= read -r id; do
        polybar-msg -p "$id" hook music-toggle "$action" 1>/dev/null 2>&1
    done < <(echo "$pids")
}

# Display the current status of the music player in Polybar
status_in_polybar() {
    player_status=$(MusicControl --status 2>/dev/null)
    case "$player_status" in
        "Stopped")
            echo "No music is playing" ;;
        "Paused") 
            update_hooks "$polybar_music_pid" 2
            MusicControl --metadata-format
            ;;
        "Playing")
            update_hooks "$polybar_music_pid" 1
            MusicControl --metadata-format
            ;;
        *)
            echo "No player is running";;
    esac
}
#######################################################
case $CURRENT_PLAYER in
    MPD)
        case $1 in
            # Fetch INFORMATION from the music player.
            --player) echo "$CURRENT_PLAYER" ;;
            --status) echo "$(mpc status | head -2 | tail -1 | cut -c2-8 | sed 's/]//g' | sed 's/./\U&/' || echo 'Stopped')" ;;
            --title) echo "$(mpc -f %title% current || echo 'Play Something')" ;;
            --artist) echo "$(mpc -f %artist% current || echo 'No Artist')" ;;
            --position) echo "$(mpc status %currenttime% || echo '0:00')" ;;
            --elapsed-secs) echo "$(mpc status %currenttime% | awk -F: '{print ($1 * 60) + $2}' || echo '0')" ;;
            --length) echo "$(mpc status %totaltime% || echo '0:00')" ;;
            --total-secs) echo "$(mpc status %totaltime% | awk -F: '{print ($1 * 60) + $2}' || echo '0')" ;;
            # CONTROL playback actions of the music player.
            --next) mpc -q next ;;
            --previous) mpc -q prev ;;
            --toggle) mpc -q toggle ;;
            --play) mpc -q play ;;
            --pause) mpc -q pause ;;
            --stop) mpc -q stop ;;
            --shuffle) echo "$(mpc status | sed -n '3s/.*random: \([^ ]*\).*/\1/p' | sed 's/.*/\u&/' || echo 'Off')" ;;
            --loop) echo "$(mpc status | sed -n '3s/.*repeat: \([^ ]*\).*/\1/p' | sed 's/.*/\u&/' || echo 'Off')" ;;
            # Additional Features
            --metadata-format) mpc -f "%title% - %artist%" current ;;
            --extract-cover-art) extract_cover_art ;;
            --status-in-polybar) status_in_polybar ;;
            --switch-player) switch_player ;;
        esac
        ;;
    spotify)
        case $1 in
            # Fetch INFORMATION from the music player.
            --player) echo "$CURRENT_PLAYER" ;;
            --status) echo "$(playerctl -p "$CURRENT_PLAYER" status || echo 'Stopped')" ;;
            --title) echo "$(playerctl -p "$CURRENT_PLAYER" metadata -f '{{title}}' || echo 'Play Something')" ;;
            --artist) echo "$(playerctl -p "$CURRENT_PLAYER" metadata -f '{{artist}}' || echo 'No Artist')" ;;
            --position) echo "$(playerctl -p "$CURRENT_PLAYER" position -f "{{ duration(position) }}" || echo '0:00')" ;;
            --elapsed-secs) echo "$(playerctl -p "$CURRENT_PLAYER" position | sed 's/..\{6\}$//' || echo '0')" ;;
            --length) echo "$(playerctl -p "$CURRENT_PLAYER" metadata -f "{{ duration(mpris:length) }}" || echo '0:00')" ;;
            --total-secs) echo "$(playerctl -p "$CURRENT_PLAYER" metadata mpris:length | sed 's/.\{6\}$//' || echo '0')" ;;
            # CONTROL playback actions of the music player.
            --next) playerctl -p "$CURRENT_PLAYER" next ;;
            --previous) playerctl -p "$CURRENT_PLAYER" previous ;;
            --toggle) playerctl -p "$CURRENT_PLAYER" play-pause ;;
            --play) playerctl -p "$CURRENT_PLAYER" play ;;
            --pause) playerctl -p "$CURRENT_PLAYER" pause ;;
            --stop) playerctl -p "$CURRENT_PLAYER" stop ;;
            --shuffle) echo "$(playerctl -p "$CURRENT_PLAYER" shuffle  || echo 'Off')" ;;
            --loop) echo "$(playerctl -p "$CURRENT_PLAYER" loop || echo 'None')" ;;
            # Additional Features
            --metadata-format) playerctl -p "$CURRENT_PLAYER" metadata -f "{{ title }} - {{ artist }}" ;;
            --extract-cover-art) extract_cover_art ;;
            --status-in-polybar) status_in_polybar ;;
            --switch-player) switch_player ;;
        esac
esac 2>/dev/null