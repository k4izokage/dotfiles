#!/usr/bin/env bash
#  ███╗   ███╗███████╗██████╗ ██╗ █████╗      ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  ██████╗ ██╗
#  ████╗ ████║██╔════╝██╔══██╗██║██╔══██╗    ██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔═══██╗██║
#  ██╔████╔██║█████╗  ██║  ██║██║███████║    ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝██║   ██║██║
#  ██║╚██╔╝██║██╔══╝  ██║  ██║██║██╔══██║    ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██║   ██║██║
#  ██║ ╚═╝ ██║███████╗██████╔╝██║██║  ██║    ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║╚██████╔╝███████╗
#  ╚═╝     ╚═╝╚══════╝╚═════╝ ╚═╝╚═╝  ╚═╝     ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚══════╝
# Author : gh0stzk (https://github.com/gh0stzk/)
# Modified: k4izokage (https://github.com/k4izokage/)

# This script uses playerctl and mpc to control the multimedia playback
# "stop, pause, play, next, previous" of different players like
# spotify, ncmpcpp, clementine, strawberry and others.

############### Def Variables ###############
source "${HOME}"/.config/Poneglyph

# Current source audio player
current_player="spotify"

# Here the cover image will be saved.
Cover=/tmp/cover.png
# if cover not found in metadata use this instead
bkpCover=$rice_path/assets/fallback.webp

# mpd music directory for mpd clients.
mpddir=~/Music

# Get last song name
LAST_SONG_FILE="/tmp/last_song.txt"

############### Def Functions ###############
# Toggle the source audio player
# Call the function with the desired options, example:
# toggle_player "MPD" "Spotify" "playerctld"
toggle_player() {
    # Stop current player
    MediaControl --pause

    # Find the current position of the current_control value in the `players` array
    # and calculate the index of the next value
    local players=("$@")
    for i in "${!players[@]}"; do
        if [ "${players[$i]}" = "$current_player" ]; then
            index=$i
            break
        fi
    done
    next_index=$(( (index + 1) % ${#players[@]} ))
    next_value="${players[$next_index]}"

    # Update the value of current_control in the file
    sed -i "s/current_player=\"$current_player\"/current_player=\"$next_value\"/" $rice_path/src/MediaControl

    MediaControl --play
}

# Handle MPRIS (Spotify) spec cover art extraction
extract_spotify_cover_art() {
    current_song="$(playerctl --player="$current_player" metadata --format '{{title}}-{{artist}}')"
    last_song=""
    [ -f "$LAST_SONG_FILE" ] && last_song=$(cat "$LAST_SONG_FILE")

    if [ "$current_song" != "$last_song" ] || [ ! -f "$Cover" ]; then
        albumart="$(playerctl --player="$current_player" metadata mpris:artUrl | sed -e 's/open.spotify.com/i.scdn.co/g')"
        if [[ $(playerctl --player="$current_player" metadata mpris:artUrl) ]]; then
            curl -s "$albumart" --output $Cover
        else
            cp $bkpCover $Cover
        fi
    echo "$current_song" > "$LAST_SONG_FILE"
    fi

    echo "$Cover"
}

# Handle MPD cover art extraction
extract_mpd_cover_art() {
    current_song=$(mpc current -f "%title%-%artist%")
    last_song=""
    [ -f "$LAST_SONG_FILE" ] && last_song=$(cat "$LAST_SONG_FILE")

    if [ "$current_song" != "$last_song" ] || [ ! -f "$Cover" ]; then
        ffmpeg -i "$mpddir/$(mpc current -f %file%)" "${Cover}" -y &> /dev/null || cp $bkpCover $Cover
        echo "$current_song" > "$LAST_SONG_FILE"
    fi

    echo "$Cover"
}

#############################################

case $current_player in
    MPD)
        case $1 in
            --next)
                mpc -q next
                ;;
            --previous)
                mpc -q prev
                ;;
            --play)
                mpc -q play
                ;;
            --pause)
                mpc -q pause
                ;;
            --toggle)
                mpc -q toggle
                ;;
            --stop)
                mpc -q stop
                ;;
            --title)
                title=$(mpc -f %title% current)
                echo "${title:-Play Something}"
                ;;
            --artist)
                artist=$(mpc -f %artist% current)
                echo "${artist:-No Artist}"
                ;;
            --status)
                status=$(mpc status | head -2 | tail -1 | cut -c2-8 | sed 's/]//g' | sed 's/./\U&/')
                echo "${status:-Stopped}"
                ;;
            --player)
                echo "$current_player"
                ;;
            --cover)
                extract_mpd_cover_art ;;
            --nccover)
                ffmpeg -i "$mpddir"/"$(mpc current -f %file%)" "${Cover}" -y &> /dev/null || cp $bkpCover $Cover
                ;;
            --position)
                position=$(mpc status %currenttime%)
                echo "${position:-0:00}"
                ;;
            --positions)
                positions=$(mpc status %currenttime% | awk -F: '{print ($1 * 60) + $2}')
                echo "${positions:-0}"
                ;;
            --length)
                length=$(mpc status %totaltime%)
                echo "${length:-0:00}"
                ;;
            --lengths)
                lengths=$(mpc status %totaltime% | awk -F: '{print ($1 * 60) + $2}')
                echo "${lengths:-0}"
                ;;
            --shuffle)
                shuffle=$(mpc status | sed -n '3s/.*random: \([^ ]*\).*/\1/p' | sed 's/.*/\u&/')
                echo "${shuffle:-Off}"
                ;;
            --loop)
                loop=$(mpc status | sed -n '3s/.*repeat: \([^ ]*\).*/\1/p' | sed 's/.*/\u&/')
                echo "${loop:-Off}"
                ;;
            --toggle-player)
                toggle_player "MPD" "spotify"
                ;;
        esac
        ;;
    *)
        case $1 in
            --next)
                playerctl --player="$current_player" next
                ;;
            --previous)
                playerctl --player="$current_player" previous
                ;;
            --play)
                playerctl --player="$current_player" play
                ;;
            --pause)
                playerctl --player="$current_player" pause
                ;;
            --toggle)
                playerctl --player="$current_player" play-pause
                ;;
            --stop)
                playerctl --player="$current_player" stop
                ;;
            --title)
                title=$(playerctl --player="$current_player" metadata --format "{{title}}")
                echo "${title:-Play Something}"
                ;;
            --artist)
                artist=$(playerctl --player="$current_player" metadata --format "{{artist}}")
                echo "${artist:-No Artist}"
                ;;
            --status)
                status=$(playerctl --player="$current_player" status)
                echo "${status:-Stopped}"
                ;;
            --player)
                echo "$current_player"
                ;;
            --cover)
                extract_spotify_cover_art ;;
            --position)
                position=$(playerctl --player="$current_player" position --format "{{ duration(position) }}")
                echo "${position:-0:00}"
                ;;
            --positions)
                positions=$(playerctl --player="$current_player" position | sed 's/..\{6\}$//')
                echo "${positions:-0}"
                ;;
            --length)
                length=$(playerctl --player="$current_player" metadata --format "{{ duration(mpris:length) }}")
                echo "${length:-0:00}"
                ;;
            --lengths)
                lengths=$(playerctl --player="$current_player" metadata mpris:length | sed 's/.\{6\}$//')
                echo "${lengths:-0}"
                ;;
            --shuffle)
                shuffle=$(playerctl --player="$current_player" shuffle)
                echo "${shuffle:-Off}"
                ;;
            --loop)
                loop=$(playerctl --player="$current_player" loop)
                echo "${loop:-None}"
                ;;
            --toggle-player)
                toggle_player "MPD" "spotify"
                ;;
        esac
esac 2>/dev/null